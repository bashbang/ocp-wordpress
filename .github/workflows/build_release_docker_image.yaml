# This action produces a docker artifact of a Wordpress Image de3signed for OCP.
name: Build and Release WP Image

on:
  push:
    branches: ['release']
  workflow_dispatch:

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create auth.json from secrets
      - name: Create auth.json
        run: |
          echo '${{ secrets.COMPOSER_AUTH }}' > ./docker/auth.json

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.actor }}/wordpress

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./docker
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMPOSER_AUTH=${{ secrets.COMPOSER_AUTH }}

      # Clean up sensitive files
      - name: Clean up auth.json
        if: always()
        run: rm -f ./docker/auth.json

      # would prefer to scan the image BEFORE it's uploaded, but I've not been able to find a hook in the build-push-action that would allow this to happen
      # TODO: rather than using the build-push-action break the steps up with just a docker build / scan / docker push method.
      - name: Scan image
        run: |
          docker images
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype ghcr.io/${{ github.actor }}/wordpress:release